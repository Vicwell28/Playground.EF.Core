// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Playground.EF.Core.Infrastructure.Persistence;

#nullable disable

namespace Playground.EF.Core.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241231154550_AddProductCategory")]
    partial class AddProductCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("CATEGORY_ID")
                        .HasComment("Identificador único de la categoría, tipo GUID.");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CATEGORY_NAME")
                        .HasComment("Nombre de la categoría (máx 50 caracteres).");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Fecha y hora de creación (UTC).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT")
                        .HasComment("Fecha y hora de la última actualización (UTC).");

                    b.HasKey("Id");

                    b.ToTable("TBL_CATEGORIES", (string)null);
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("PRODUCT_ID")
                        .HasComment("Identificador único del producto, tipo GUID.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Fecha y hora de creación (UTC).");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION")
                        .HasComment("Descripción detallada o extensa del producto (sin límite de longitud).");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IS_ACTIVE")
                        .HasComment("Flag para indicar si el producto está activo o no en el catálogo.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME")
                        .HasComment("Nombre del producto (máx 50 caracteres).");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("PRICE")
                        .HasComment("Precio unitario del producto con dos decimales de precisión.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("ROW_VERSION")
                        .HasComment("Token de concurrencia para detectar actualizaciones simultáneas.");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("STOCK_QUANTITY")
                        .HasComment("Cantidad en inventario disponible.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT")
                        .HasComment("Fecha y hora de la última actualización (UTC).");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Product_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Product_Name");

                    b.ToTable("TBL_PRODUCTS", null, t =>
                        {
                            t.HasCheckConstraint("CK_TBL_PRODUCTS_PRICE", "[PRICE] >= 0");

                            t.HasCheckConstraint("CK_TBL_PRODUCTS_STOCK", "[STOCK_QUANTITY] >= 0");
                        });
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.ProductCategory", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Fecha y hora de creación (UTC).");

                    b.Property<bool>("IsPrimaryCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IS_PRIMARY_CATEGORY");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT")
                        .HasComment("Fecha y hora de la última actualización (UTC).");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TBL_PRODUCT_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.ProductDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("PRODUCT_ID")
                        .HasComment("Identificador único del producto relacionado.");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MANUFACTURER")
                        .HasComment("Fabricante del producto.");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MODEL")
                        .HasComment("Modelo del producto.");

                    b.Property<string>("WarrantyInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("WARRANTY_INFO")
                        .HasComment("Información de garantía del producto.");

                    b.HasKey("ProductId");

                    b.ToTable("TBL_PRODUCT_DETAIL", (string)null);
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("REVIEW_ID")
                        .HasComment("Identificador único de la reseña, tipo GUID.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONTENT")
                        .HasComment("Contenido de la reseña del producto.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Fecha y hora de creación de la reseña (UTC).");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("PRODUCT_ID")
                        .HasComment("Identificador único del producto relacionado.");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("RATING")
                        .HasComment("Calificación del producto (1 a 5).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_AT")
                        .HasComment("Fecha y hora de actualizacion de la reseña (UTC).");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_Review_ProductId");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_Review_Rating");

                    b.ToTable("TBL_REVIEWS", (string)null);
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.ProductCategory", b =>
                {
                    b.HasOne("Playground.EF.Core.Domain.Entities.Abstracts.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Playground.EF.Core.Domain.Entities.Abstracts.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.ProductDetail", b =>
                {
                    b.HasOne("Playground.EF.Core.Domain.Entities.Abstracts.Product", "Product")
                        .WithOne("ProductDetail")
                        .HasForeignKey("Playground.EF.Core.Domain.Entities.Abstracts.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Review", b =>
                {
                    b.HasOne("Playground.EF.Core.Domain.Entities.Abstracts.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Playground.EF.Core.Domain.Entities.Abstracts.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductDetail");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
